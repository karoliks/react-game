{"ast":null,"code":"import store from \"../../config/store\";\nimport { SPRITE_SIZE, MAP_WIDTH, MAP_HEIGHT } from \"../../config/constants\";\nexport default function handleMovement(player) {\n  function getNewPosition(direction) {\n    const oldPos = store.getState().player.position;\n\n    switch (direction) {\n      case \"WEST\":\n        return [oldPos[0] - SPRITE_SIZE, oldPos[1]];\n\n      case \"EAST\":\n        return [oldPos[0] + SPRITE_SIZE, oldPos[1]];\n\n      case \"NORTH\":\n        return [oldPos[0], oldPos[1] - SPRITE_SIZE];\n\n      case \"SOUTH\":\n        return [oldPos[0], oldPos[1] + SPRITE_SIZE];\n    }\n  }\n\n  function observeBoundaries(oldPos, newPos) {\n    console.log(oldPos, newPos);\n    console.log(MAP_HEIGHT, MAP_WIDTH);\n    console.log(newPos[0] >= 0);\n    return newPos[0] >= 0 && newPos[0] <= MAP_WIDTH && newPos[1] >= 0 && newPos <= MAP_HEIGHT ? newPos : oldPos;\n  }\n\n  function dispatchMove(direction) {\n    const oldPos = store.getState().player.position;\n    store.dispatch({\n      type: \"MOVE_PLAYER\",\n      payload: {\n        position: observeBoundaries(oldPos, getNewPosition(direction))\n      }\n    });\n  }\n\n  function handleKeyDown(e) {\n    e.preventDefault();\n\n    switch (e.keyCode) {\n      case 37:\n        return dispatchMove(\"WEST\");\n\n      case 38:\n        return dispatchMove(\"NORTH\");\n\n      case 39:\n        return dispatchMove(\"EAST\");\n\n      case 40:\n        return dispatchMove(\"SOUTH\");\n\n      default:\n        console.log(e.keyCode);\n    }\n  }\n\n  window.addEventListener(\"keydown\", e => {\n    handleKeyDown(e);\n  });\n  return player;\n}","map":{"version":3,"sources":["/home/karoline/GitHub/react-game/src/features/player/movement.js"],"names":["store","SPRITE_SIZE","MAP_WIDTH","MAP_HEIGHT","handleMovement","player","getNewPosition","direction","oldPos","getState","position","observeBoundaries","newPos","console","log","dispatchMove","dispatch","type","payload","handleKeyDown","e","preventDefault","keyCode","window","addEventListener"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,oBAAlB;AACA,SAASC,WAAT,EAAsBC,SAAtB,EAAiCC,UAAjC,QAAmD,wBAAnD;AAEA,eAAe,SAASC,cAAT,CAAwBC,MAAxB,EAAgC;AAC7C,WAASC,cAAT,CAAwBC,SAAxB,EAAmC;AACjC,UAAMC,MAAM,GAAGR,KAAK,CAACS,QAAN,GAAiBJ,MAAjB,CAAwBK,QAAvC;;AAEA,YAAQH,SAAR;AACE,WAAK,MAAL;AACE,eAAO,CAACC,MAAM,CAAC,CAAD,CAAN,GAAYP,WAAb,EAA0BO,MAAM,CAAC,CAAD,CAAhC,CAAP;;AACF,WAAK,MAAL;AACE,eAAO,CAACA,MAAM,CAAC,CAAD,CAAN,GAAYP,WAAb,EAA0BO,MAAM,CAAC,CAAD,CAAhC,CAAP;;AACF,WAAK,OAAL;AACE,eAAO,CAACA,MAAM,CAAC,CAAD,CAAP,EAAYA,MAAM,CAAC,CAAD,CAAN,GAAYP,WAAxB,CAAP;;AACF,WAAK,OAAL;AACE,eAAO,CAACO,MAAM,CAAC,CAAD,CAAP,EAAYA,MAAM,CAAC,CAAD,CAAN,GAAYP,WAAxB,CAAP;AARJ;AAUD;;AAED,WAASU,iBAAT,CAA2BH,MAA3B,EAAmCI,MAAnC,EAA2C;AACzCC,IAAAA,OAAO,CAACC,GAAR,CAAYN,MAAZ,EAAoBI,MAApB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYX,UAAZ,EAAwBD,SAAxB;AACAW,IAAAA,OAAO,CAACC,GAAR,CAAYF,MAAM,CAAC,CAAD,CAAN,IAAa,CAAzB;AACA,WAAOA,MAAM,CAAC,CAAD,CAAN,IAAa,CAAb,IACLA,MAAM,CAAC,CAAD,CAAN,IAAaV,SADR,IAELU,MAAM,CAAC,CAAD,CAAN,IAAa,CAFR,IAGLA,MAAM,IAAIT,UAHL,GAIHS,MAJG,GAKHJ,MALJ;AAMD;;AAED,WAASO,YAAT,CAAsBR,SAAtB,EAAiC;AAC/B,UAAMC,MAAM,GAAGR,KAAK,CAACS,QAAN,GAAiBJ,MAAjB,CAAwBK,QAAvC;AACAV,IAAAA,KAAK,CAACgB,QAAN,CAAe;AACbC,MAAAA,IAAI,EAAE,aADO;AAEbC,MAAAA,OAAO,EAAE;AACPR,QAAAA,QAAQ,EAAEC,iBAAiB,CAACH,MAAD,EAASF,cAAc,CAACC,SAAD,CAAvB;AADpB;AAFI,KAAf;AAMD;;AAED,WAASY,aAAT,CAAuBC,CAAvB,EAA0B;AACxBA,IAAAA,CAAC,CAACC,cAAF;;AACA,YAAQD,CAAC,CAACE,OAAV;AACE,WAAK,EAAL;AACE,eAAOP,YAAY,CAAC,MAAD,CAAnB;;AACF,WAAK,EAAL;AACE,eAAOA,YAAY,CAAC,OAAD,CAAnB;;AACF,WAAK,EAAL;AACE,eAAOA,YAAY,CAAC,MAAD,CAAnB;;AACF,WAAK,EAAL;AACE,eAAOA,YAAY,CAAC,OAAD,CAAnB;;AACF;AACEF,QAAAA,OAAO,CAACC,GAAR,CAAYM,CAAC,CAACE,OAAd;AAVJ;AAYD;;AAEDC,EAAAA,MAAM,CAACC,gBAAP,CAAwB,SAAxB,EAAoCJ,CAAD,IAAO;AACxCD,IAAAA,aAAa,CAACC,CAAD,CAAb;AACD,GAFD;AAIA,SAAOf,MAAP;AACD","sourcesContent":["import store from \"../../config/store\";\nimport { SPRITE_SIZE, MAP_WIDTH, MAP_HEIGHT } from \"../../config/constants\";\n\nexport default function handleMovement(player) {\n  function getNewPosition(direction) {\n    const oldPos = store.getState().player.position;\n\n    switch (direction) {\n      case \"WEST\":\n        return [oldPos[0] - SPRITE_SIZE, oldPos[1]];\n      case \"EAST\":\n        return [oldPos[0] + SPRITE_SIZE, oldPos[1]];\n      case \"NORTH\":\n        return [oldPos[0], oldPos[1] - SPRITE_SIZE];\n      case \"SOUTH\":\n        return [oldPos[0], oldPos[1] + SPRITE_SIZE];\n    }\n  }\n\n  function observeBoundaries(oldPos, newPos) {\n    console.log(oldPos, newPos);\n    console.log(MAP_HEIGHT, MAP_WIDTH);\n    console.log(newPos[0] >= 0);\n    return newPos[0] >= 0 &&\n      newPos[0] <= MAP_WIDTH &&\n      newPos[1] >= 0 &&\n      newPos <= MAP_HEIGHT\n      ? newPos\n      : oldPos;\n  }\n\n  function dispatchMove(direction) {\n    const oldPos = store.getState().player.position;\n    store.dispatch({\n      type: \"MOVE_PLAYER\",\n      payload: {\n        position: observeBoundaries(oldPos, getNewPosition(direction)),\n      },\n    });\n  }\n\n  function handleKeyDown(e) {\n    e.preventDefault();\n    switch (e.keyCode) {\n      case 37:\n        return dispatchMove(\"WEST\");\n      case 38:\n        return dispatchMove(\"NORTH\");\n      case 39:\n        return dispatchMove(\"EAST\");\n      case 40:\n        return dispatchMove(\"SOUTH\");\n      default:\n        console.log(e.keyCode);\n    }\n  }\n\n  window.addEventListener(\"keydown\", (e) => {\n    handleKeyDown(e);\n  });\n\n  return player;\n}\n"]},"metadata":{},"sourceType":"module"}