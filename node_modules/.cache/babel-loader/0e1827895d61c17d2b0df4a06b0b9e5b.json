{"ast":null,"code":"import store from \"../../config/store\";\nimport { SPRITE_SIZE, MAP_WIDTH, MAP_HEIGHT } from \"../../config/constants\";\nexport default function handleMovement(player) {\n  function getNewPosition(oldPos, direction) {\n    switch (direction) {\n      case \"WEST\":\n        return [oldPos[0] - SPRITE_SIZE, oldPos[1]];\n\n      case \"EAST\":\n        return [oldPos[0] + SPRITE_SIZE, oldPos[1]];\n\n      case \"NORTH\":\n        return [oldPos[0], oldPos[1] - SPRITE_SIZE];\n\n      case \"SOUTH\":\n        return [oldPos[0], oldPos[1] + SPRITE_SIZE];\n    }\n  } //   boolean function to determine whether the sprite is at an edge\n\n\n  function observeBoundaries(oldPos, newPos) {\n    return newPos[0] >= 0 && newPos[0] <= MAP_WIDTH - SPRITE_SIZE && newPos[1] >= 0 && newPos[1] <= MAP_HEIGHT - SPRITE_SIZE;\n  }\n\n  function observeImpassable(oldPos, newPos) {\n    const tiles = store.getState().map.tiles;\n    const y = newPos[1] / SPRITE_SIZE;\n    const x = newPos[0] / SPRITE_SIZE;\n    const newTile = tiles[y][x];\n    return;\n  }\n\n  function dispatchMove(newPos) {\n    store.dispatch({\n      type: \"MOVE_PLAYER\",\n      payload: {\n        position: newPos\n      }\n    });\n  }\n\n  function attemtMove(direction) {\n    const oldPos = store.getState().player.position;\n    const newPos = getNewPosition(direction);\n\n    if (observeBoundaries(oldPos, newPos) && observeImpassable(oldPos, newPos)) {\n      dispatchMove(newPos);\n    }\n  }\n\n  function handleKeyDown(e) {\n    e.preventDefault();\n\n    switch (e.keyCode) {\n      case 37:\n        return dispatchMove(\"WEST\");\n\n      case 38:\n        return dispatchMove(\"NORTH\");\n\n      case 39:\n        return dispatchMove(\"EAST\");\n\n      case 40:\n        return dispatchMove(\"SOUTH\");\n\n      default:\n        console.log(e.keyCode);\n    }\n  }\n\n  window.addEventListener(\"keydown\", e => {\n    handleKeyDown(e);\n  });\n  return player;\n}","map":{"version":3,"sources":["/home/karoline/GitHub/react-game/src/features/player/movement.js"],"names":["store","SPRITE_SIZE","MAP_WIDTH","MAP_HEIGHT","handleMovement","player","getNewPosition","oldPos","direction","observeBoundaries","newPos","observeImpassable","tiles","getState","map","y","x","newTile","dispatchMove","dispatch","type","payload","position","attemtMove","handleKeyDown","e","preventDefault","keyCode","console","log","window","addEventListener"],"mappings":"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","sourcesContent":["import store from \"../../config/store\";\nimport { SPRITE_SIZE, MAP_WIDTH, MAP_HEIGHT } from \"../../config/constants\";\n\nexport default function handleMovement(player) {\n  function getNewPosition(oldPos, direction) {\n    switch (direction) {\n      case \"WEST\":\n        return [oldPos[0] - SPRITE_SIZE, oldPos[1]];\n      case \"EAST\":\n        return [oldPos[0] + SPRITE_SIZE, oldPos[1]];\n      case \"NORTH\":\n        return [oldPos[0], oldPos[1] - SPRITE_SIZE];\n      case \"SOUTH\":\n        return [oldPos[0], oldPos[1] + SPRITE_SIZE];\n    }\n  }\n\n  //   boolean function to determine whether the sprite is at an edge\n  function observeBoundaries(oldPos, newPos) {\n    return (\n      newPos[0] >= 0 &&\n      newPos[0] <= MAP_WIDTH - SPRITE_SIZE &&\n      newPos[1] >= 0 &&\n      newPos[1] <= MAP_HEIGHT - SPRITE_SIZE\n    );\n  }\n\n  function observeImpassable(oldPos, newPos) {\n    const tiles = store.getState().map.tiles;\n    const y = newPos[1] / SPRITE_SIZE;\n    const x = newPos[0] / SPRITE_SIZE;\n\n    const newTile = tiles[y][x];\n    return;\n  }\n\n  function dispatchMove(newPos) {\n    store.dispatch({\n      type: \"MOVE_PLAYER\",\n      payload: {\n        position: newPos,\n      },\n    });\n  }\n\n  function attemtMove(direction) {\n    const oldPos = store.getState().player.position;\n    const newPos = getNewPosition(direction);\n\n    if (\n      observeBoundaries(oldPos, newPos) &&\n      observeImpassable(oldPos, newPos)\n    ) {\n      dispatchMove(newPos);\n    }\n  }\n\n  function handleKeyDown(e) {\n    e.preventDefault();\n    switch (e.keyCode) {\n      case 37:\n        return dispatchMove(\"WEST\");\n      case 38:\n        return dispatchMove(\"NORTH\");\n      case 39:\n        return dispatchMove(\"EAST\");\n      case 40:\n        return dispatchMove(\"SOUTH\");\n      default:\n        console.log(e.keyCode);\n    }\n  }\n\n  window.addEventListener(\"keydown\", (e) => {\n    handleKeyDown(e);\n  });\n\n  return player;\n}\n"]},"metadata":{},"sourceType":"module"}