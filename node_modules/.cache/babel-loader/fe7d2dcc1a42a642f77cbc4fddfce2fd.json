{"ast":null,"code":"import store from \"../../config/store\";\nimport { SPRITE_SIZE, MAP_WIDTH, MAP_HEIGHT } from \"../../config/constants\";\nexport default function handleMovement(player) {\n  // find new position given old position and desired direction\n  function getNewPosition(oldPos, direction) {\n    switch (direction) {\n      case \"WEST\":\n        return [oldPos[0] - SPRITE_SIZE, oldPos[1]];\n\n      case \"EAST\":\n        return [oldPos[0] + SPRITE_SIZE, oldPos[1]];\n\n      case \"NORTH\":\n        return [oldPos[0], oldPos[1] - SPRITE_SIZE];\n\n      case \"SOUTH\":\n        return [oldPos[0], oldPos[1] + SPRITE_SIZE];\n    }\n  } //   boolean function to determine whether the sprite is at an edge\n\n\n  function observeBoundaries(oldPos, newPos) {\n    return newPos[0] >= 0 && newPos[0] <= MAP_WIDTH - SPRITE_SIZE && newPos[1] >= 0 && newPos[1] <= MAP_HEIGHT - SPRITE_SIZE;\n  } // find the location to the relevant sprite on the spirte image\n\n\n  function getSpriteLocation(direction) {\n    switch (direction) {\n      case \"SOUTH\":\n        return `0px ${SPRITE_SIZE * 0}px`;\n\n      case \"EAST\":\n        return `0px ${SPRITE_SIZE * 1}px`;\n\n      case \"WEST\":\n        return `0px ${SPRITE_SIZE * 2}px`;\n\n      case \"NORTH\":\n        return `0px ${SPRITE_SIZE * 3}px`;\n    }\n  } //   boolean function to determine whether the sprite is trying to pass an object\n\n\n  function observeImpassable(oldPos, newPos) {\n    const tiles = store.getState().map.tiles;\n    const y = newPos[1] / SPRITE_SIZE;\n    const x = newPos[0] / SPRITE_SIZE;\n    const nextTile = tiles[y][x];\n    return nextTile < 5;\n  } // Move sprite to desired location\n\n\n  function dispatchMove(direction, newPos) {\n    store.dispatch({\n      type: \"MOVE_PLAYER\",\n      payload: {\n        position: newPos,\n        direction: direction,\n        spriteLocation: getSpriteLocation(direction)\n      }\n    });\n  } // Check if desired move is possible, and if possible, move the sprite\n\n\n  function attemtMove(direction) {\n    const oldPos = store.getState().player.position;\n    const newPos = getNewPosition(oldPos, direction);\n\n    if (observeBoundaries(oldPos, newPos) && observeImpassable(oldPos, newPos)) {\n      dispatchMove(direction, newPos);\n    }\n  } // translate keycodes to directions\n\n\n  function handleKeyDown(e) {\n    e.preventDefault();\n\n    switch (e.keyCode) {\n      case 37:\n        return attemtMove(\"WEST\");\n\n      case 38:\n        return attemtMove(\"NORTH\");\n\n      case 39:\n        return attemtMove(\"EAST\");\n\n      case 40:\n        return attemtMove(\"SOUTH\");\n\n      default:\n        console.log(e.keyCode);\n    }\n  }\n\n  window.addEventListener(\"keydown\", e => {\n    handleKeyDown(e);\n  });\n  return player;\n}","map":{"version":3,"sources":["/home/karoline/GitHub/react-game/src/features/player/movement.js"],"names":["store","SPRITE_SIZE","MAP_WIDTH","MAP_HEIGHT","handleMovement","player","getNewPosition","oldPos","direction","observeBoundaries","newPos","getSpriteLocation","observeImpassable","tiles","getState","map","y","x","nextTile","dispatchMove","dispatch","type","payload","position","spriteLocation","attemtMove","handleKeyDown","e","preventDefault","keyCode","console","log","window","addEventListener"],"mappings":"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","sourcesContent":["import store from \"../../config/store\";\nimport { SPRITE_SIZE, MAP_WIDTH, MAP_HEIGHT } from \"../../config/constants\";\n\nexport default function handleMovement(player) {\n  // find new position given old position and desired direction\n  function getNewPosition(oldPos, direction) {\n    switch (direction) {\n      case \"WEST\":\n        return [oldPos[0] - SPRITE_SIZE, oldPos[1]];\n      case \"EAST\":\n        return [oldPos[0] + SPRITE_SIZE, oldPos[1]];\n      case \"NORTH\":\n        return [oldPos[0], oldPos[1] - SPRITE_SIZE];\n      case \"SOUTH\":\n        return [oldPos[0], oldPos[1] + SPRITE_SIZE];\n    }\n  }\n\n  //   boolean function to determine whether the sprite is at an edge\n  function observeBoundaries(oldPos, newPos) {\n    return (\n      newPos[0] >= 0 &&\n      newPos[0] <= MAP_WIDTH - SPRITE_SIZE &&\n      newPos[1] >= 0 &&\n      newPos[1] <= MAP_HEIGHT - SPRITE_SIZE\n    );\n  }\n\n  // find the location to the relevant sprite on the spirte image\n  function getSpriteLocation(direction) {\n    switch (direction) {\n      case \"SOUTH\":\n        return `0px ${SPRITE_SIZE * 0}px`;\n      case \"EAST\":\n        return `0px ${SPRITE_SIZE * 1}px`;\n      case \"WEST\":\n        return `0px ${SPRITE_SIZE * 2}px`;\n      case \"NORTH\":\n        return `0px ${SPRITE_SIZE * 3}px`;\n    }\n  }\n\n  //   boolean function to determine whether the sprite is trying to pass an object\n  function observeImpassable(oldPos, newPos) {\n    const tiles = store.getState().map.tiles;\n    const y = newPos[1] / SPRITE_SIZE;\n    const x = newPos[0] / SPRITE_SIZE;\n    const nextTile = tiles[y][x];\n    return nextTile < 5;\n  }\n\n  // Move sprite to desired location\n  function dispatchMove(direction, newPos) {\n    store.dispatch({\n      type: \"MOVE_PLAYER\",\n      payload: {\n        position: newPos,\n        direction: direction,\n        spriteLocation: getSpriteLocation(direction),\n      },\n    });\n  }\n\n  // Check if desired move is possible, and if possible, move the sprite\n  function attemtMove(direction) {\n    const oldPos = store.getState().player.position;\n    const newPos = getNewPosition(oldPos, direction);\n\n    if (\n      observeBoundaries(oldPos, newPos) &&\n      observeImpassable(oldPos, newPos)\n    ) {\n      dispatchMove(direction, newPos);\n    }\n  }\n\n  // translate keycodes to directions\n  function handleKeyDown(e) {\n    e.preventDefault();\n    switch (e.keyCode) {\n      case 37:\n        return attemtMove(\"WEST\");\n      case 38:\n        return attemtMove(\"NORTH\");\n      case 39:\n        return attemtMove(\"EAST\");\n      case 40:\n        return attemtMove(\"SOUTH\");\n      default:\n        console.log(e.keyCode);\n    }\n  }\n\n  window.addEventListener(\"keydown\", (e) => {\n    handleKeyDown(e);\n  });\n\n  return player;\n}\n"]},"metadata":{},"sourceType":"module"}